{
  "Header": {
    "_": [
      " This file for vsSolutionBuildEvent ",
      " https://github.com/3F/vsSolutionBuildEvent "
    ],
    "Compatibility": "0.12.4"
  },
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "ActVar",
      "Caption": "Prepare data",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[$(charset = $(CharacterSet))]",
          "#[$(arch = $(Platform))]",
          "",
          "#[($(Configuration) == \"PublicRelease\") {",
          "    #[$(cfgname = 'Release')]",
          "    $(isPubRel = true)",
          "}",
          "else{",
          "    #[$(cfgname = $(Configuration))]",
          "    $(isPubRel = false)",
          "}]",
          "",
          "$(revDeltaBase  = \"2020/08/09\")",
          "$(revDeltaMin   = $([System.Math]::Pow(10, 3)))",
          "$(revDeltaMax   = 65534)",
          "",
          "$(oraw      = \"bin\\raw\")",
          "$(orawApp   = \"$(oraw)\\$(cfgname)\\$(arch)\\$(charset)/\")",
          "$(odir      = \"bin/Releases/\")",
          "$(onupkg    = \"bin/nupkg/\")",
          "",
          "#[$(pDir    = \"regXwild\")]",
          "#[$(pConari = \"Conari\")]",
          "",
          "#[var pVer  = #[File get(\".version\")]]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActVersion",
      "Caption": "Update version of regXwild",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(isPubRel)) ",
          "{",
          "    #[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "    #[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "    #[var revBuild  = #[$(",
          "        [System.TimeSpan]::FromTicks('$(",
          "            [MSBuild]::Subtract($(tNow), $(tBase))",
          "        )')",
          "        .TotalMinutes.ToString('0')",
          "    )]]",
          "                         ",
          "    #[var revBuild  = #[$(",
          "    ",
          "     [MSBuild]::Add(",
          "         $(revDeltaMin), ",
          "         $([MSBuild]::Modulo(",
          "             $(revBuild), ",
          "             $([MSBuild]::Subtract(",
          "                 $(revDeltaMax), $(revDeltaMin)",
          "              ))",
          "          ))",
          "      )",
          "      ",
          "    )]]",
          "    ",
          "    #[$(pVerBuild = \"$(pVer).$(revBuild)\")]",
          "    #[$(pVerBuild0 = $(pVerBuild))]",
          "}",
          "else",
          "{",
          "    #[$(revBuild = 0)]",
          "    #[$(pVerBuild = \"$(pVer)\")]",
          "    #[$(pVerBuild0 = \"$(pVerBuild).0\")]",
          "}]",
          "",
          "#[\" ",
          "    Checking of the git to define sha1, branch name, etc.",
          "\"]",
          "#[($(isPubRel) ) { #[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]] }else{ #[var -isGit] }]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "    ",
          "    #[$(rxwPrintVersion = \"$(pVerBuild)+$(bSha1)\")]",
          "    #[$(buildCfg = $(Configuration))]",
          "}",
          "else {",
          "    #[$(bSha1 = '')]",
          "    #[$(buildCfg = '')]",
          "    #[$(rxwPrintVersion = \"$(pVerBuild)\")]",
          "}]",
          "",
          "#[var tpl = #[$(tpl.Replace(\"%B_SHA1%\", \"#[var bSha1]\"))]]",
          "",
          "",
          "#[var tpl =// This code was generated by a vsSolutionBuildEvent.",
          "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
          "",
          "#pragma once",
          "#ifndef _RXW_VERSION_",
          "#define _RXW_VERSION_",
          "",
          "#include \"stdafx.h\"",
          "#include \"typedefs.h\"",
          "",
          "namespace net { namespace r_eg { namespace regXwild",
          "{",
          "    struct RXWVersion",
          "    {",
          "        struct TNum",
          "        {",
          "            const int major;",
          "            const int minor;",
          "            const int patch;",
          "            const int build;",
          "",
          "            TNum() : major(#[$(pVer.Split(\".\")[0])]), minor(#[$(pVer.Split(\".\")[1])]), patch(#[$(pVer.Split(\".\")[2])]), build(#[$(revBuild)]) { }",
          "",
          "        } number;",
          "",
          "        const rxwtypes::TCHAR* bSha1;",
          "        const rxwtypes::TCHAR* config;",
          "        const rxwtypes::TCHAR* product;",
          "",
          "        RXWVersion() : bSha1(_T(\"#[$(bSha1)]\")), config(_T(\"#[$(buildCfg)]\")), product(_T(\"#[$(rxwPrintVersion)]\")) { }",
          "    };",
          "}}}",
          "",
          "#endif // _RXW_VERSION_",
          "]",
          "",
          "#[File write(\"$(pDir)/RXWVersion.h\"):#[$(tpl.Replace('\\n', '\\r\\n'))]]",
          "",
          "",
          "#[IO replace.Regex(\"$(pDir)/regXwild.common.cpp\", \"(vsSBE.+?_T\\().+?;\", \"$1\\\"#[$(pVerBuild)]\\\");\")]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActRc",
      "Caption": "Update .rc",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "",
          "#[var rc =#[File get(\"regXwild/regXwild.rc\")]]",
          "",
          "#[var rc =$([System.Text.RegularExpressions.Regex]::Replace('$(rc)', '(VERSION\\s)[\\d,]+', '${1}$(pVerBuild0.Replace(\".\", \",\"))'))]",
          "#[var rc =$([System.Text.RegularExpressions.Regex]::Replace('$(rc)', '(Version\", \")[\\d.]+', '${1}$(pVerBuild0)'))]",
          "",
          "#[var rc =$([System.Text.RegularExpressions.Regex]::Replace('$(rc)', '(ProductVersion\", \")([^\"]+)\"', '${1}$(rxwPrintVersion)\"'))]",
          "",
          "#[File write(\"regXwild/regXwild.rc\"):#[var rc]]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActSubmodules",
      "Caption": "submodules and packages",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "##[( !(#[IO exists.file(\"$(pConari)/Conari.sln\")]) )",
          "{",
          "    #[File call(\"git\", \"submodule update --init --recursive Conari\", 1000)]",
          "}]",
          "",
          "",
          "#[\" Packages \"]",
          "",
          "#[( !(#[IO exists.file(\"packages/__checked\")]) )",
          "{",
          "    #[File call(\"tools\\hmsbuild.bat\", \"-t:restore /v:q /nologo /p:Configuration=$(Configuration)\", 1000)]",
          "    ",
          "    #[IO copy.directory(\"\", \"packages/\", true)]",
          "    #[File write(\"packages/__checked\"): ]",
          "}]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "ActSnetGnt",
      "Caption": "snet helper",
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO write(\"$(orawApp)snet-run.bat\"):@echo off",
          "",
          "set ConariVersion=1.4.0",
          "set gnt=..\\..\\tools\\gnt.bat",
          "set platform=net40",
          "set Conari=Conari.dll",
          "",
          "if not exist %Conari% if not exist %gnt% goto notfound",
          "",
          "call %gnt% /p:ngpackages=\"Conari/%ConariVersion%\" || goto notfound",
          "",
          "copy /B/Y packages\\Conari.%ConariVersion%\\lib\\%platform%\\%Conari% \"%cd%\"",
          "snet.exe",
          "exit /B 0",
          "",
          ":notfound",
          "echo You need %Conari% v%ConariVersion% to continue. But even GetNuTool was not found to get it automatically. 1>&2",
          "echo Something went wrong, please get it manually: https://www.nuget.org/packages/Conari/%ConariVersion% 1>&2",
          "pause",
          "exit /B 2",
          "]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "BuildInfo",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[var buildInfo =  $([System.String]::Concat(\"  \"))",
          "    regXwild #[$(rxwPrintVersion)]",
          "    ",
          "    ",
          "    Configuration: #[$(Configuration)]",
          "    ",
          "    Build version: #[$(revBuild)]",
          "    ",
          "    SHA-1:         #[$(bSha1)]",
          "    ",
          "    ",
          "    :: generated by a vsSolutionBuildEvent #[$(vsSolutionBuildEvent)]",
          "]",
          "",
          "#[IO writeLine(\"$(orawApp)/build-info.txt\"):#[$(buildInfo.Replace('\\n', '\\r\\n'))]]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActPack",
      "Caption": "Create zip archive of regXwild",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(__InitBuild) == 1) {",
          "    #[try{ #[IO delete.directory(\"$(odir)\", true)] }catch{ }]",
          "}]",
          "",
          "#[IO copy.directory(\"\", \"$(odir)\", true)]",
          "#[IO copy.file({",
          "            \"$(pDir)\\*.h\"",
          "        },",
          "        \"$(orawApp)\\include\",",
          "        true,",
          "        { \"targetver.h\" })]",
          "",
          "#[IO copy.file(\"$(pDir)\\core\\EXT\\AlgorithmExt.h\", \"$(orawApp)\\include\\core\\EXT\\\\\", true)]",
          "#[IO copy.file(\"$(pDir)\\core\\ESS\\*.h\", \"$(orawApp)\\include\\core\\ESS\\\\\", true)]",
          "        ",
          "#[IO copy.file({ \"Readme.md\", \"LICENSE\", \"changelog.txt\", \".version\", \"$(orawApp)/build-info.txt\" }, \"$(oraw)\", true)]",
          "#[IO copy.file({ \"tools\\*.bat\" }, \"$(oraw)\\tools\\\\\", true)]",
          "",
          "",
          "#[( $(arch) == \"Win32\") { #[$(fnameArch = 'x86')] }else{ #[$(fnameArch = $(arch))] }]",
          "",
          "#[7z pack.files(",
          "        {",
          "            \"$(oraw)\\Readme.md\", ",
          "            \"$(oraw)\\LICENSE\",",
          "            \"$(oraw)\\changelog.txt\",",
          "            \"$(oraw)\\.version\",",
          "            \"$(oraw)\\build-info.txt\",",
          "            \"$(oraw)\\tools\\*.bat\",",
          "            \"$(orawApp)\\include\\*.h\",",
          "            \"$(orawApp)\\include\\core\\ESS\\*.h\",",
          "            \"$(orawApp)\\include\\core\\EXT\\*.h\",",
          "            \"$(orawApp)algo.exe\", ",
          "            \"$(orawApp)snet.exe\", ",
          "            \"$(orawApp)snet-run.bat\",",
          "            \"$(orawApp)regXwild.dll\",",
          "            \"$(orawApp)regXwild.lib\",",
          "            \"$(orawApp)regXwild.exp\",",
          "            \"$(orawApp)regXwild.pdb\"",
          "        }, ",
          "        \"$(odir)regXwild.$(pVer).$(fnameArch).$(charset).zip\")]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActNupkg",
      "Caption": "Prepare regXwild for NuGet",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(__InitBuild) == 1) {",
          "    #[try{ #[IO delete.directory(\"$(onupkg)\", true)] }catch{ }]",
          "}]",
          "",
          "#[$(onupkgBin = \"$(onupkg)lib\\\\native\\\\$(arch)-$(charset)\\\\\")]",
          "",
          "#[\" https://github.com/3F/DllExport/issues/36 \"]",
          "#[IO copy.directory(\"\", \"$(onupkg)/lib/net/\", true)]",
          "#[IO write(\"$(onupkg)/lib/net/_._\"):]",
          "",
          "#[IO copy.directory(\"\", \"$(onupkg)/lib/netcoreapp/\", true)]",
          "#[IO write(\"$(onupkg)/lib/netcoreapp/_._\"):]",
          "",
          "#[IO copy.directory(\"\", \"$(onupkg)/lib/netstandard/\", true)]",
          "#[IO write(\"$(onupkg)/lib/netstandard/_._\"):]",
          "",
          "#[IO copy.directory(\"$(orawApp)\\include\", \"$(onupkgBin)include\", true, true)]",
          "#[IO copy.directory(\"tools\", \"$(onupkg)tools\", true, true)]",
          "",
          "#[IO replace(\"$(orawApp)snet-run.bat\", \"..\\..\\tools\\gnt.bat\", \"..\\..\\..\\tools\\gnt.bat\")]",
          "#[IO copy.file({",
          "            \"$(orawApp)algo.exe\", ",
          "            \"$(orawApp)snet.exe\", ",
          "            \"$(orawApp)snet-run.bat\",",
          "            \"$(orawApp)regXwild.dll\",",
          "            \"$(orawApp)regXwild.lib\",",
          "            \"$(orawApp)regXwild.exp\",",
          "            \"$(orawApp)regXwild.pdb\"",
          "        }, ",
          "        \"$(onupkgBin)\", true)]",
          "        ",
          "#[IO copy.file({ ",
          "        \"tools\\regXwild.nuspec\", ",
          "        \"Readme.md\", ",
          "        \"$(oraw)\\.version\",",
          "        \"$(orawApp)/build-info.txt\",",
          "        \"LICENSE\", ",
          "        \"changelog.txt\" ",
          "    }, ",
          "    \"$(onupkg)\", true)]",
          "#[IO replace(\"$(onupkg)regXwild.nuspec\", \"$-version-$\", \"$(pVer)\")]",
          "",
          "#[IO copy.directory(\"\", \"$(onupkg)build\\native\", true)]",
          "#[IO copy.file(\"tools\\regXwild.native.targets\", \"$(onupkg)build\\native/regXwild.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(onupkg)build\\net\", true)]",
          "#[IO copy.file(\"tools\\regXwild.dotnet.targets\", \"$(onupkg)build\\net/regXwild.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(onupkg)build\\netcoreapp\", true)]",
          "#[IO copy.file(\"tools\\regXwild.dotnet.targets\", \"$(onupkg)build\\netcoreapp/regXwild.targets\", true)]",
          "",
          "#[IO copy.directory(\"\", \"$(onupkg)build\\netstandard\", true)]",
          "#[IO copy.file(\"tools\\regXwild.dotnet.targets\", \"$(onupkg)build\\netstandard/regXwild.targets\", true)]",
          "",
          "#[IO replace(\"$(onupkg)regXwild.nuspec\", \"{build-info}\", \"$(buildInfo)\")]"
        ]
      }
    },
    {
      "Enabled": false,
      "Name": "ActConari",
      "Caption": "Conari build ...",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[IO writeLine(STDOUT):Preparing of Conari engine...]",
          "",
          "#[(! #[IO exists.directory(\"$(pConari)\\bin\\Release\\raw\")] ) {",
          "    #[IO cmd(\"cd $(pConari) & build Release\", 400)]",
          "}]",
          "",
          "",
          "#[try { ",
          "    #[IO copy.directory(\"Conari\\Conari\\bin\\Release\", \"$(onupkgBin)../Conari/\", true)]",
          "}",
          "catch(err, msg){",
          "    #[IO writeLine(STDOUT): #[$(msg)] - #[$(err)]]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActNuGet",
      "Caption": "Final packing - regXwild + Conari",
      "IgnoreIfBuildFailed": true,
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command__": [
          "#[($(__FinalBuild) == 1) {",
          "    #[NuGet gnt.raw(\"/t:pack /p:ngin=\\\"$(onupkg)\\\" /p:ngout=\\\"$(odir)\\\"\")]",
          "}]"
        ]
      }
    }
  ]
}